import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

class MéthodePuissance4Test {

	@Test
	void testTestvictoire() {
		char [][] tabVLR=  {{'.','.','.','.','.','.','.'},
							{'.','.','.','.','.','.','.'},
							{'.','.','.','.','.','.','.'},
							{'.','.','.','.','.','.','.'},
							{'.','.','.','.','.','.','.'},
							{'.','R','R','R','R','.','.'}};
		
		char [][] tabVLJ=  {{'.','.','.','.','.','.','.'},
							{'.','.','.','J','J','J','J'},
							{'.','.','.','.','.','.','.'},
							{'.','.','.','.','.','.','.'},
							{'.','.','.','.','.','.','.'},
							{'.','.','.','.','.','.','.'}};
		
		char [][] tabE=    {{'.','.','.','.','.','.','.'},
							{'.','.','.','.','.','.','.'},
							{'.','.','.','.','.','.','.'},
							{'.','.','.','.','.','.','.'},
							{'.','.','.','.','.','.','.'},
							{'.','.','.','.','.','.','.'}};
		
		char [][] tabVCR=  {{'.','.','.','.','.','.','.'},
							{'.','.','.','.','.','.','.'},
							{'.','.','.','R','.','.','.'},
							{'.','.','.','R','.','.','.'},
							{'.','.','.','R','.','.','.'},
							{'.','.','.','R','.','.','.'}};
		
		char [][] tabVCJ=  {{'.','.','.','.','.','.','.'},
							{'.','.','.','.','.','.','.'},
							{'.','.','.','J','.','.','.'},
							{'.','.','.','J','.','.','.'},
							{'.','.','.','J','.','.','.'},
							{'.','.','.','J','.','.','.'}};
		
		char [][] tabVDDR= {{'.','.','.','.','.','.','.'},
							{'.','.','.','.','.','.','.'},
							{'.','.','.','R','.','.','.'},
							{'.','.','R','.','.','.','.'},
							{'.','R','.','.','.','.','.'},
							{'R','.','.','.','.','.','.'}};
		
		char [][] tabVDDJ= {{'.','.','.','.','.','.','.'},
							{'.','.','.','.','.','.','.'},
							{'.','.','.','J','.','.','.'},
							{'.','.','J','.','.','.','.'},
							{'.','J','.','.','.','.','.'},
							{'J','.','.','.','.','.','.'}};
		
		char [][] tabVDGR= {{'.','.','.','.','.','.','.'},
							{'.','.','.','.','.','.','.'},
							{'.','.','R','.','.','.','.'},
							{'.','.','.','R','.','.','.'},
							{'.','.','.','.','R','.','.'},
							{'.','.','.','.','.','R','.'}};
		
		char [][] tabVDGJ= {{'.','.','.','.','.','.','.'},
							{'.','.','.','.','.','.','.'},
							{'.','.','J','.','.','.','.'},
							{'.','.','.','J','.','.','.'},
							{'.','.','.','.','J','.','.'},
							{'.','.','.','.','.','J','.'}};
		// cas d'échec
		assertFalse(MéthodePuissance4.testVictoire(tabE));
		// différents cas de victoire jaune
		assertTrue(MéthodePuissance4.testVictoire(tabVDGJ));
		assertTrue(MéthodePuissance4.testVictoire(tabVDDJ));
		assertTrue(MéthodePuissance4.testVictoire(tabVCJ));
		assertTrue(MéthodePuissance4.testVictoire(tabVLJ));
		// différents cas de victoire rouge
		assertTrue(MéthodePuissance4.testVictoire(tabVDGR));
		assertTrue(MéthodePuissance4.testVictoire(tabVDDR));
		assertTrue(MéthodePuissance4.testVictoire(tabVCR));
		assertTrue(MéthodePuissance4.testVictoire(tabVLR));
		
	}
	@Test
	void testEstJouable() {
		char [][] tabJouable= 	{{'.','.','.','.','.','.','.'},
								{'.','.','.','.','.','.','.'},
								{'.','.','.','.','.','.','.'},
								{'.','.','.','.','.','.','.'},
								{'.','.','.','.','.','.','.'},
								{'.','.','.','.','.','.','.'}};
		char [][] tabPasJouable=	{{'.','R','.','.','.','.','.'},
									 {'.','J','.','.','.','.','.'},
									 {'.','R','.','.','.','.','.'},
									 {'.','R','.','.','.','.','.'},
									 {'.','J','.','.','.','.','.'},
									 {'.','J','.','.','.','.','.'}};
		
		assertTrue(MéthodePuissance4.estJouable(tabJouable, 1));
		assertFalse(MéthodePuissance4.estJouable(tabPasJouable, 1));
	}
	@Test
	void testPresqueVictoire() {
		char [][] tabPVLG= {{'.','.','.','.','.','.','.'},
							{'.','.','.','.','.','.','.'},
							{'.','.','.','.','.','.','.'}, 
							{'.','.','.','.','.','.','.'}, 
							{'.','.','.','.','.','.','.'}, 
							{'.','R','R','R','.','.','.'}};
		char [][] tabPVLD= {{'.','.','.','.','.','.','.'},
							{'.','.','.','.','.','.','.'},
							{'.','.','.','.','.','.','.'},
							{'.','.','.','.','.','.','.'},
							{'.','.','.','.','.','.','.'},
							{'J','R','R','R','.','.','.'}};
		char [][] tabPVC=  {{'.','.','.','.','.','.','.'},
							{'.','.','.','.','.','.','.'},
							{'.','.','.','.','.','.','.'},
							{'.','.','.','R','.','.','.'},
							{'.','.','.','R','.','.','.'},
							{'.','.','.','R','.','.','.'}};
		char [][] tabPVDG= {{'.','.','.','.','.','.','.'},
							{'.','.','.','.','.','.','.'},
							{'.','.','.','.','.','.','.'},
							{'J','R','.','.','.','.','.'},
							{'.','.','R','.','.','.','.'},	
							{'.','.','.','R','.','.','.'}};
		char [][] tabPVDD= {{'.','.','.','.','.','.','.'},
							{'.','.','.','.','.','.','.'},
							{'.','.','.','.','.','.','.'},
							{'.','.','.','.','.','R','J'},
							{'.','.','.','.','R','.','.'},	
							{'.','.','.','R','.','.','.'}};
		
		assertEquals(0, MéthodePuissance4.presqueVictoire(tabPVLG));
		assertEquals(4, MéthodePuissance4.presqueVictoire(tabPVLD));
		assertEquals(3, MéthodePuissance4.presqueVictoire(tabPVC));
		assertEquals(0, MéthodePuissance4.presqueVictoire(tabPVDG));
		assertEquals(6, MéthodePuissance4.presqueVictoire(tabPVDD));
		
	}
}
